# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

#master에 push나 pull_request가 되었을때 Workflow를 Trigger를 실행한다.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

  #GitHub_Actions 의 workflow는 다양한 job으로 구성되며 job는 다시 Steps로 구성된다.
  #Github_Actions에서 사용될 JDK를 세팅(프로젝트나 AWS의 Java 버전과는 달라도 무방)
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      #Gradle 캐싱 부분
      - name: Gradle caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
       #properties 생성
      - name: make application-prod.properties
        if: contains(github.ref, 'master')
        run : |
          cd ./src/main/resoures
          touch ./application_github_action.yml
          echo "${{ secrets.APPLICATION_PROPERTIES}}" > ./application_github_action.yml

        #Gradle Build / Docker Build & Push

        #gradle build
      - name: Build with Gradle
        run: ./greadlew build -x test

        #docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'master')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}
          docker push ${{ secrets.DOCKER_REPO }}

     ##deploy to production
      - name: Deploy to prod
        uses: inforplan/ssh-action
        id: deploy-prod
        if: contains(github.ref, 'master')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f {docker ps -qa}
            sudo docker pull ${{secretes.DOCKER_REPO}}
            docker-compose up -d
            docker image prune -f